{% set cov_enabled = (cov_enabled == "1") %}
{% set docker_image = "public.ecr.aws/q9t5s3a7/vllm-ci-test-repo:$BUILDKITE_COMMIT" %}
{% set docker_image_torch_nightly = "public.ecr.aws/q9t5s3a7/vllm-ci-test-repo:$BUILDKITE_COMMIT-torch-nightly" %}
{% set docker_image_cu118 = "public.ecr.aws/q9t5s3a7/vllm-ci-test-repo:$BUILDKITE_COMMIT-cu118" %}
{% set docker_image_cpu = "public.ecr.aws/q9t5s3a7/vllm-ci-test-repo:$BUILDKITE_COMMIT-cpu" %}
{% if branch == "main" %}
{% set docker_image = "public.ecr.aws/q9t5s3a7/vllm-ci-postmerge-repo:$BUILDKITE_COMMIT" %}
{% set docker_image_latest = "public.ecr.aws/q9t5s3a7/vllm-ci-postmerge-repo:latest" %}
{% set docker_image_torch_nightly = "public.ecr.aws/q9t5s3a7/vllm-ci-postmerge-repo:$BUILDKITE_COMMIT-torch-nightly" %}
{% set docker_image_cu118 = "public.ecr.aws/q9t5s3a7/vllm-ci-postmerge-repo:$BUILDKITE_COMMIT-cu118" %}
{% set docker_image_cpu = "public.ecr.aws/q9t5s3a7/vllm-ci-postmerge-repo:$BUILDKITE_COMMIT-cpu" %}
{% endif %}
{% set docker_image_amd = "rocm/vllm-ci:$BUILDKITE_COMMIT" %}
{% set default_working_dir = "/vllm-workspace/tests" %}
{% set hf_home = "/root/.cache/huggingface" %}
{% set hf_home_efs = "/mnt/efs/hf_cache" %}
{% set hf_home_fsx = "/fsx/hf_cache" %}
{% set list_file_diff = list_file_diff | split("|") %}

{# Intelligent test targeting: Detect when only test files changed and collect them #}
{%- set tests_acc = namespace(only_tests=true, any=false, changed=[]) %}
{%- for file in list_file_diff %}
{%- if file[:6] == 'tests/' and '/test_' in file and file[-3:] == '.py' %}
{%- set tests_acc.any = true %}
{%- set tests_acc.changed = tests_acc.changed + [file[6:]] %}
{%- else %}
{%- set tests_acc.only_tests = false %}
{%- endif %}
{%- endfor %}
{%- set tests_only = (tests_acc.only_tests and tests_acc.any) %}
{%- set changed_tests = tests_acc.changed %}

{% macro add_pytest_coverage(cmd, coverage_file) %}
{% if "pytest " in cmd %}
COVERAGE_FILE={{ coverage_file }} {{ cmd | replace("pytest ", "pytest --cov=vllm --cov-report=xml --cov-append --durations=0 ") }} || true
{% else %}
{{ cmd }}
{% endif %}
{% endmacro %}

{% macro add_docker_pytest_coverage(step, cov_enabled) %}
{# Compute coverage file id #}
{% set step_length = step.label | length %}
{% set step_first = step.label | first | default("x") %}
{% set coverage_file = ".coverage." + step_length ~ "_" ~ step_first %}

{# Intelligent test targeting: Build matched test targets for this step when only tests changed #}
{%- set match_ns = namespace(targets=[]) %}
{%- if tests_only and step.source_file_dependencies %}
{%- for dep in step.source_file_dependencies %}
{%- if dep[:6] == 'tests/' %}
{%- set dep_rel = dep[6:] %}
{# Handle deps that already end with '/' (e.g., tests/benchmarks/) #}
{%- if dep_rel[-1:] == '/' %}
{%- set dep_dir_prefix = dep_rel %}
{%- set dep_file_name = dep_rel[:-1] ~ '.py' %}
{%- else %}
{%- set dep_dir_prefix = dep_rel ~ '/' %}
{%- set dep_file_name = dep_rel ~ '.py' %}
{%- endif %}
{%- for t in changed_tests %}
{# Check if t starts with dep_dir_prefix (for directories) or equals dep_file_name (for files) #}
{%- set prefix_len = dep_dir_prefix | length %}
{%- set t_prefix = t[:prefix_len] %}
{%- set cond1 = (t | length >= prefix_len and t_prefix == dep_dir_prefix) %}
{%- set cond2 = (t == dep_file_name) %}
{%- if cond1 or cond2 %}
{%- set match_ns.targets = match_ns.targets + [t] %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- set matched_targets = match_ns.targets %}

{# If we have matched targets, run only those specific tests #}
{% if matched_targets | length > 0 %}
pytest -v -s {{ matched_targets | join(' ') }}
{% else %}
{# Default behavior: preserve original commands with optional coverage injection #}
{% if cov_enabled %}
{% set ns = namespace(has_pytest=false) %}
{% if step.command %}
{% if "pytest " in step.command %}{% set ns.has_pytest = true %}{% endif %}
{{ add_pytest_coverage(step.command, coverage_file) }}
{% else %}
{% for cmd in step.commands %}
{% if "pytest " in cmd %}{% set ns.has_pytest = true %}{% endif %}
{{ add_pytest_coverage(cmd, coverage_file) }}{{ " && " if not loop.last else "" }}{% endfor %}
{% endif %}{% if ns.has_pytest %} && curl -sSL https://raw.githubusercontent.com/vllm-project/ci-infra/{{ vllm_ci_branch | default('main') }}/buildkite/scripts/upload_codecov.sh | bash -s -- \"{{ step.label }}\"{% endif %}
{% else %}
{{ step.command or (step.commands | join(' && ')) | safe }}
{% endif %}
{% endif %}
{% endmacro %}

{% macro render_cuda_config(step, image, default_working_dir, hf_home_fsx, hf_home, branch) %}
agents:
  {% if step.label == "Documentation Build" %}
  queue: small_cpu_queue_premerge
  {% elif step.no_gpu %}
  queue: cpu_queue_premerge_us_east_1
  {% elif step.gpu == "a100" %}
  queue: a100_queue
  {% elif step.gpu == "h100" %}
  queue: mithril-h100-pool
  {% elif step.gpu == "h200" %}
  queue: skylab-h200
  {% elif step.gpu == "b200" %}
  queue: B200
  {% elif step.num_gpus == 2 or step.num_gpus == 4 %}
  queue: gpu_4_queue
  {% else %}
  queue: gpu_1_queue
  {% endif %}

{% if step.num_nodes >= 2 %}
commands:
  - ./.buildkite/scripts/run-multi-node-test.sh {{ (step.working_dir or default_working_dir) | safe }} {{ step.num_nodes }} {{ step.num_gpus }} {{ image }} {% for command in step.commands %}"{{ (command | join(' && ')) | safe }}" {% endfor %}
{% endif %}

{% if step.parallelism %}
parallelism: {{ step.parallelism }}
{% endif %}

retry:
  automatic:
    - exit_status: -1
      limit: 1
    - exit_status: -10
      limit: 1

{% if step.num_nodes < 2 %}
plugins:
  {% if step.gpu != "a100" and step.gpu != "h100" and step.gpu != "h200" and step.gpu != "b200" %}
  - docker#v5.2.0:
      image: {{ image }}
      always-pull: true
      propagate-environment: true
      {% if not step.no_gpu %}
      gpus: all
      {% endif %}
      {% if step.label == "Benchmarks" or step.mount_buildkite_agent or cov_enabled %}
      mount-buildkite-agent: true
      {% endif %}
      command: ["bash", "{% if fail_fast == "true" %}-xce{% else %}-xc{% endif %}", "(command nvidia-smi || true) && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe }} && {{ add_docker_pytest_coverage(step, cov_enabled) }}"]
      environment:
        - VLLM_USAGE_SOURCE=ci-test
        - NCCL_CUMEM_HOST_ENABLE=0
        - HF_HOME={{ hf_home_fsx }}
        - HF_TOKEN
        - CODECOV_TOKEN
        {% if fail_fast == "true" %}
        - PYTEST_ADDOPTS=-x
        {% endif %}
        {% if branch == "main" %}
        - BUILDKITE_ANALYTICS_TOKEN
        {% endif %}
        {% if step.label == "Speculative decoding tests" %}
        - VLLM_ATTENTION_BACKEND=XFORMERS
        {% endif %}
      volumes:
        - /dev/shm:/dev/shm
        - {{ hf_home_fsx }}:{{ hf_home_fsx }}
  {% elif step.gpu == "h200" %}
   - docker#v5.2.0:
      image: {{ image }}
      always-pull: true
      propagate-environment: true
      gpus: all
      command: ["bash", "{% if fail_fast == "true" %}-xce{% else %}-xc{% endif %}", "(command nvidia-smi || true) && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe }} && {{ add_docker_pytest_coverage(step, cov_enabled) }}"]
      environment:
        - VLLM_USAGE_SOURCE=ci-test
        - NCCL_CUMEM_HOST_ENABLE=0
        - HF_HOME=/benchmark-hf-cache
        - HF_TOKEN
        - CODECOV_TOKEN
        {% if fail_fast == "true" %}
        - PYTEST_ADDOPTS=-x
        {% endif %}
        {% if branch == "main" %}
        - BUILDKITE_ANALYTICS_TOKEN
        {% endif %}
      volumes:
        - /dev/shm:/dev/shm
        - /data/benchmark-hf-cache:/benchmark-hf-cache
        - /data/benchmark-vllm-cache:/root/.cache/vllm
  {% elif step.gpu == "b200" %}
   - docker#v5.2.0:
      image: {{ image }}
      always-pull: true
      propagate-environment: true
      # gpus will be configured by BUILDKITE_PLUGIN_DOCKER_GPUS in per host environment variable.
      # gpus: all
      command: ["bash", "{% if fail_fast == "true" %}-xce{% else %}-xc{% endif %}", "(command nvidia-smi || true) && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe }} && {{ add_docker_pytest_coverage(step, cov_enabled) }}"]
      environment:
        - VLLM_USAGE_SOURCE=ci-test
        - NCCL_CUMEM_HOST_ENABLE=0
        - HF_HOME=/benchmark-hf-cache
        - HF_TOKEN
        - CODECOV_TOKEN
        {% if fail_fast == "true" %}
        - PYTEST_ADDOPTS=-x
        {% endif %}
        {% if branch == "main" %}
        - BUILDKITE_ANALYTICS_TOKEN
        {% endif %}
      volumes:
        - /dev/shm:/dev/shm
        - /data/benchmark-hf-cache:/benchmark-hf-cache
        - /data/benchmark-vllm-cache:/root/.cache/vllm
  {% elif step.gpu == "h100" %}
  - kubernetes:
      podSpec:
        containers:
          - image: {{ image }}
            command:
              - bash -c "{{ '(command nvidia-smi || true) && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd ' ~ ((step.working_dir or default_working_dir) | safe) ~ ' && ' ~ (step.command or (step.commands | join(" && ")) | safe) }}"
            resources:
              limits:
                nvidia.com/gpu: {{ step.num_gpus or 1 }}
            volumeMounts:
              - name: devshm
                mountPath: /dev/shm
              - name: hf-cache
                mountPath: {{ hf_home }}
            env:
              - name: VLLM_USAGE_SOURCE
                value: ci-test
              - name: NCCL_CUMEM_HOST_ENABLE
                value: "0"
              - name: HF_HOME
                value: {{ hf_home }}
        nodeSelector:
          nvidia.com/gpu.product: NVIDIA-H100-80GB-HBM3
        volumes:
          - name: devshm
            emptyDir:
              medium: Memory
          - name: hf-cache
            hostPath:
              path: /mnt/hf-cache
              type: Directory
  {% else %}
  - kubernetes:
      podSpec:
        priorityClassName: ci
        containers:
          - image: {{ image }}
            command:
              - bash -c "{{ '(command nvidia-smi || true) && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd ' ~ ((step.working_dir or default_working_dir) | safe) ~ ' && ' ~ (step.command or (step.commands | join(" && ")) | safe) }}"
            resources:
              limits:
                nvidia.com/gpu: {{ step.num_gpus or 1 }}
            volumeMounts:
              - name: devshm
                mountPath: /dev/shm
              - name: hf-cache
                mountPath: {{ hf_home }}
            env:
              - name: VLLM_USAGE_SOURCE
                value: ci-test
              - name: NCCL_CUMEM_HOST_ENABLE
                value: "0"
              - name: HF_HOME
                value: {{ hf_home }}
              - name: HF_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: hf-token-secret
                    key: token
        nodeSelector:
          nvidia.com/gpu.product: NVIDIA-A100-SXM4-80GB
        volumes:
          - name: devshm
            emptyDir:
              medium: Memory
          - name: hf-cache
            hostPath:
              path: {{ hf_home }}
              type: Directory
  {% endif %}
{% endif %}
{% endmacro %}

  - group: "AMD Tests"
    depends_on: ~
    steps:
      - label: "AMD: :docker: build image"
        depends_on: ~
        soft_fail: false
        commands:
          # Handle the introduction of test target in Dockerfile.rocm
          - >
            docker build
            --build-arg max_jobs=16
            --build-arg REMOTE_VLLM=1
            --build-arg ARG_PYTORCH_ROCM_ARCH='gfx90a;gfx942'
            --build-arg VLLM_BRANCH=$BUILDKITE_COMMIT
            --tag {{ docker_image_amd }}
            -f docker/Dockerfile.rocm
            --target test
            --no-cache
            --progress plain .
          - "docker push {{ docker_image_amd }}"
        key: "amd-build"
        env:
          DOCKER_BUILDKIT: "1"
        retry:
          automatic:
            - exit_status: -1  # Agent was lost
              limit: 1
            - exit_status: -10  # Agent was lost
              limit: 1
            - exit_status: 1  # Machine occasionally fail
              limit: 1
        agents:
          queue: amd-cpu

    {% for step in steps %}
    {% if step.mirror_hardwares and mirror_hw in step.mirror_hardwares %}
      - label: "{{ step.agent_pool }}: {{ step.label }}"
        depends_on: amd-build
        agents:
          {% if step.agent_pool %}
          queue: amd_{{ step.agent_pool }}
          {% else %}
          queue: amd_mi325_1
          {% endif %}
        command: bash .buildkite/scripts/hardware_ci/run-amd-test.sh "(command rocm-smi || true) && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe  }} ; {{ step.command  or (step.commands | join(" && ")) | safe }}"
        env:
          DOCKER_BUILDKIT: "1"
        priority: 100
        {% if step.grade and step.grade == "Blocking" %}
        soft_fail: false
        {% else %}
        soft_fail: true
        {% endif%}
    {% endif %}
    {% endfor %}
